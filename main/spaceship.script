local device = sys.get_sys_info().system_name
function dir(obj)
	for k, v in pairs(obj) do print(k) end
end


function init(self, pos)
	print("position of spaceship = ", go.get_position())
	msg.post(".", "acquire_input_focus")  -- Enable input
	self.SCALE_INCREASE = 1.5
	self.initial_scale = go.get_scale()
	self.touches = {}  -- Store active touches
	self.dragging = false  -- Track dragging status
	self.touch_id = nil  -- Store active drag touch ID
	self.offset = vmath.vector3()  -- Store offset for dragging
	self.input = vmath.vector3()
	self.initial_position = go.get_position()


end

function update(self, dt)
	if vmath.length_sqr(self.input) > 1 then
		self.input = vmath.normalize(self.input)
	end

	local movement = self.input * .3  -- Adjust speed
	local p = go.get_position()
	go.set_position(p + movement)

	-- Reset input each frame for keyboard movement
	self.input = vmath.vector3()
end

function on_input(self, action_id, action)
	print(self, action_id, action, action.x, action.y, "=self, action_id, action")
	local pos = go.get_position()
	local touch = action

	-- -- Determine touch input
	-- if action_id == hash("mouse_button_left") and device ~= "Android" then
	-- 	touch = action
	-- 	touch.id = 0
	-- elseif action.touch then
	-- 	print("action.touch")
	-- 	touch = action.touch[1]  -- Get the first touch input
	-- end
	print(touch, " = touch")
	if touch.released then
		self.dragging = false
		-- go.set_position(self.initial_position)
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.initial_position, go.EASING_OUTQUAD, 0.1)
		go.set_scale(self.initial_scale)
	elseif self.dragging and touch.id == self.touch_id then
		print("dragging")
		go.set_position(vmath.vector3(touch.x, touch.y, 0) - self.offset)
	end
	-- Handle touch input if it exists
	if touch and is_touch_inside(go.get_position(), touch.x, touch.y) then

		if touch.pressed and self.dragging == false then
			go.set_scale(self.SCALE_INCREASE*self.initial_scale)
			if is_touch_inside(pos, touch.x, touch.y) then
				self.dragging = true
				self.touch_id = touch.id
				self.offset = vmath.vector3(touch.x, touch.y, 0) - pos
			else
				self.touches[touch.id] = { x = touch.x, y = touch.y }
			end
		end

		

	end

end




function is_touch_inside(obj_pos, touch_x, touch_y)
	local size = 30 --64*self.initial_scale  -- Adjust size of the object
	return touch_x > obj_pos.x - size and touch_x < obj_pos.x + size and
	touch_y > obj_pos.y - size and touch_y < obj_pos.y + size
end